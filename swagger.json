{
  "openapi": "3.0.0",
  "info": {
    "title": "TMS API Documentation",
    "version": "1.0.0",
    "description": "API documentation for the Transport Management System"
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMINISTRATOR",
              "TRANSPORT_MANAGER",
              "DRIVER",
              "REQUESTER",
              "WORKSHOP_MANAGER"
            ]
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Vehicle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "registrationNumber": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "AVAILABLE",
              "IN_TRANSIT",
              "UNDER_MAINTENANCE",
              "OUT_OF_SERVICE"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Job": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "priority": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH"
            ]
          },
          "siteClassification": {
            "type": "string"
          },
          "assignedDriverId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get all jobs",
        "description": "Retrieve a list of jobs with optional filters",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter jobs by status"
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string"
            },
            "description": "Filter jobs by priority"
          },
          {
            "in": "query",
            "name": "assignedDriverId",
            "schema": {
              "type": "string"
            },
            "description": "Filter jobs by assigned driver"
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Create a new job",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string"
                  },
                  "siteClassification": {
                    "type": "string"
                  },
                  "assignedDriverId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Error creating job"
          }
        }
      }
    },
    "/api/jobs/{id}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get a job by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Job ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Job details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "404": {
            "description": "Job not found"
          }
        }
      },
      "put": {
        "tags": [
          "Jobs"
        ],
        "summary": "Update a job",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Job ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "assignedDriverId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Error updating job"
          }
        }
      }
    },
    "/api/jobs/{id}/complete": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Mark a job as completed",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Job ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Job marked as completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Error completing job"
          }
        }
      }
    },
    "/api/jobs/{id}/cancel": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Cancel a job",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Job ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Job cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Error cancelling job"
          }
        }
      }
    },
    "/procedures": {
      "get": {
        "tags": [
          "Procedures"
        ],
        "summary": "Get all procedures",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of all procedures",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Procedure"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "Procedures"
        ],
        "summary": "Create a new procedure",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "description",
                  "type",
                  "questions"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "STANDARD",
                      "EXCEPTION"
                    ]
                  },
                  "questions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string"
                        },
                        "answerType": {
                          "type": "string",
                          "enum": [
                            "TEXT",
                            "BOOLEAN",
                            "CHOICE",
                            "FILE_UPLOAD"
                          ]
                        },
                        "choices": {
                          "type": "object"
                        },
                        "order": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Procedure created successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/procedures/{id}": {
      "get": {
        "tags": [
          "Procedures"
        ],
        "summary": "Get a specific procedure",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Procedure details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Procedure"
                }
              }
            }
          },
          "404": {
            "description": "Procedure not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/executions": {
      "post": {
        "tags": [
          "Executions"
        ],
        "summary": "Start a procedure execution",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "procedureId"
                ],
                "properties": {
                  "procedureId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Execution started successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/executions/{id}": {
      "patch": {
        "tags": [
          "Executions"
        ],
        "summary": "Update execution responses",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "responses",
                  "status"
                ],
                "properties": {
                  "responses": {
                    "type": "object"
                  },
                  "status": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Execution updated successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": [
          "Executions"
        ],
        "summary": "Get execution details",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Execution details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Execution"
                }
              }
            }
          },
          "404": {
            "description": "Execution not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/exceptions": {
      "post": {
        "tags": [
          "Exceptions"
        ],
        "summary": "Log an exception",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "executionId",
                  "description",
                  "evidence",
                  "actionTaken"
                ],
                "properties": {
                  "executionId": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "evidence": {
                    "type": "string"
                  },
                  "actionTaken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Exception logged successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all users",
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a user by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/vehicles": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Get all vehicles with optional filters",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Filter by vehicle type ID"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by vehicle status"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of vehicles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vehicle"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch vehicles"
          }
        }
      },
      "post": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Create a new vehicle",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Vehicle"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle created successfully"
          },
          "500": {
            "description": "Failed to create vehicle"
          }
        }
      }
    },
    "/vehicles/{id}": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Get specific vehicle by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The vehicle ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            }
          },
          "404": {
            "description": "Vehicle not found"
          },
          "500": {
            "description": "Failed to fetch vehicle"
          }
        }
      },
      "put": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Update a vehicle",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The vehicle ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Vehicle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vehicle updated successfully"
          },
          "500": {
            "description": "Failed to update vehicle"
          }
        }
      },
      "delete": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Delete a vehicle",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The vehicle ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Vehicle deleted successfully"
          },
          "500": {
            "description": "Failed to delete vehicle"
          }
        }
      }
    },
    "/vehicles/types": {
      "get": {
        "tags": [
          "Vehicle Types"
        ],
        "summary": "Get all vehicle types",
        "responses": {
          "200": {
            "description": "A list of vehicle types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleType"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to fetch vehicle types"
          }
        }
      },
      "post": {
        "tags": [
          "Vehicle Types"
        ],
        "summary": "Create a new vehicle type",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleType"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle type created successfully"
          },
          "500": {
            "description": "Failed to create vehicle type"
          }
        }
      }
    },
    "/vehicles/types/{id}": {
      "put": {
        "tags": [
          "Vehicle Types"
        ],
        "summary": "Update a vehicle type",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The vehicle type ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vehicle type updated successfully"
          },
          "500": {
            "description": "Failed to update vehicle type"
          }
        }
      },
      "delete": {
        "tags": [
          "Vehicle Types"
        ],
        "summary": "Delete a vehicle type",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The vehicle type ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Vehicle type deleted successfully"
          },
          "500": {
            "description": "Failed to delete vehicle type"
          }
        }
      }
    }
  },
  "tags": []
}