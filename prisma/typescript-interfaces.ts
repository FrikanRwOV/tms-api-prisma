// This file was auto-generated by prisma-generator-typescript-interfaces

export type AnswerType = "TEXT" | "BOOLEAN" | "CHOICE" | "FILE_UPLOAD";

export type ExecutionStatus = "IN_PROGRESS" | "COMPLETED" | "CANCELLED";

export type JobPriority = "HIGH" | "MEDIUM" | "LOW";

export type JobStatus = "PENDING" | "PLANNED" | "BLOCKED" | "IN_PROGRESS" | "COMPLETED" | "CANCELLED";

export type JobType = "COLLECT_INTERNAL_SANDS" | "COLLECT_EXTERNAL_SANDS" | "COLLECT_INTERNAL_ORES" | "COLLECT_EXTERNAL_ORES";

export type Permission = "CREATE_USER" | "READ_USER" | "UPDATE_USER" | "DELETE_USER" | "MANAGE_ROLES" | "CREATE_TRANSPORT_REQUEST" | "READ_TRANSPORT_REQUEST" | "UPDATE_TRANSPORT_REQUEST" | "DELETE_TRANSPORT_REQUEST" | "CREATE_MAINTENANCE" | "READ_MAINTENANCE" | "UPDATE_MAINTENANCE" | "DELETE_MAINTENANCE" | "VIEW_ASSIGNMENTS" | "CREATE_VEHICLE" | "READ_VEHICLE" | "UPDATE_VEHICLE" | "DELETE_VEHICLE";

export type ProcedureType = "STANDARD" | "EXCEPTION";

export type QuestionType = "TEXT" | "BOOLEAN" | "CHOICE" | "FILE_UPLOAD";

export type Role = "ADMINISTRATOR" | "TRANSPORT_MANAGER" | "DRIVER" | "REQUESTER" | "WORKSHOP_MANAGER";

export type SiteClassification = "GREEN" | "ORANGE" | "RED";

export type VehicleStatus = "AVAILABLE" | "IN_TRANSIT" | "UNDER_MAINTENANCE" | "OUT_OF_SERVICE";

export interface Area {
  id: string;
  name: string;
  site?: Site;
  siteId: string;
  shafts?: Shaft[];
  createdAt: Date;
  updatedAt: Date;
}

export interface Client {
  id: string;
  firstName: string;
  middleName: string | null;
  lastName: string;
  idNumber: string;
  address: string;
  contactNumber: string;
  whatsapp: string | null;
  email: string;
  createdAt: Date;
  updatedAt: Date;
  shafts?: Shaft[];
  syndicates?: Syndicate[];
}

export interface Exception {
  id: string;
  execution?: Execution;
  executionId: string;
  description: string;
  evidence: JsonValue;
  actionTaken: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface Execution {
  id: string;
  procedure?: Procedure;
  procedureId: string;
  user?: User;
  userId: string;
  responses: JsonValue;
  status: ExecutionStatus;
  startTime: Date;
  endTime: Date | null;
  exceptions?: Exception[];
  createdAt: Date;
  updatedAt: Date;
}

export interface Job {
  id: string;
  title: string;
  description: string;
  priority: JobPriority;
  siteClassification: SiteClassification;
  status: JobStatus;
  assignedDriver?: User | null;
  assignedDriverId: string | null;
  requester?: User | null;
  requesterId: string | null;
  attachments?: JobAttachment[];
  comments?: JobComment[];
  location: string | null;
  completionProof: string | null;
  createdAt: Date;
  updatedAt: Date;
  shaft?: Shaft;
  shaftId: string;
  pickedUpAt: Date | null;
  droppedOffAt: Date | null;
}

export interface JobAttachment {
  id: string;
  job?: Job;
  jobId: string;
  fileUrl: string;
  fileType: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface JobComment {
  id: string;
  job?: Job;
  jobId: string;
  author?: User;
  authorId: string;
  content: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface Maintenance {
  id: string;
  vehicle?: Vehicle;
  vehicleId: string;
  description: string;
  startDate: Date;
  endDate: Date | null;
  status: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface Procedure {
  id: string;
  name: string;
  description: string;
  type: ProcedureType;
  questions?: Question[];
  executions?: Execution[];
  createdAt: Date;
  updatedAt: Date;
}

export interface Question {
  id: string;
  procedure?: Procedure;
  procedureId: string;
  text: string;
  answerType: AnswerType;
  choices: JsonValue | null;
  order: number;
  createdAt: Date;
  updatedAt: Date;
  imageUrl: string | null;
  type: QuestionType;
}

export interface RolePermission {
  id: string;
  role: Role;
  permission: Permission;
  createdAt: Date;
  updatedAt: Date;
}

export interface Session {
  id: string;
  userId: string;
  token: string;
  expiresAt: Date;
  user?: User;
}

export interface Shaft {
  id: string;
  name: string;
  area?: Area;
  areaId: string;
  createdAt: Date;
  updatedAt: Date;
  client?: Client;
  clientId: string;
  jobs?: Job[];
}

export interface Syndicate {
  id: string;
  name: string;
  createdAt: Date;
  updatedAt: Date;
  clients?: Client[];
}

export interface Site {
  id: string;
  name: string;
  address: string;
  createdAt: Date;
  updatedAt: Date;
  areas?: Area[];
}

export interface Telematics {
  id: string;
  vehicle?: Vehicle;
  vehicleId: string;
  currentLocation: string | null;
  fuelLevel: number | null;
  kilometresTravelled: number;
  tonsRelocated: number | null;
  lastUpdated: Date;
  createdAt: Date;
  updatedAt: Date;
}

export interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  middleName: string | null;
  idNumber: string | null;
  contactNumber: string | null;
  whatsapp: string | null;
  address: string | null;
  password: string | null;
  authCode: string | null;
  authCodeExpires: Date | null;
  role: Role;
  sessions?: Session[];
  permissions: Permission[];
  createdAt: Date;
  updatedAt: Date;
  assignedJobs?: Job[];
  requestedJobs?: Job[];
  jobComments?: JobComment[];
  executions?: Execution[];
}

export interface Vehicle {
  id: string;
  registrationNumber: string;
  type?: VehicleType;
  typeId: string;
  status: VehicleStatus;
  telematics?: Telematics | null;
  maintenanceRecords?: Maintenance[];
  createdAt: Date;
  updatedAt: Date;
}

export interface VehicleType {
  id: string;
  name: string;
  description: string | null;
  vehicles?: Vehicle[];
  createdAt: Date;
  updatedAt: Date;
}

export interface VerificationCode {
  id: string;
  email: string;
  code: string;
  expiresAt: Date;
  createdAt: Date;
  type: string | null;
}

type JsonValue = string | number | boolean | { [key in string]?: JsonValue } | Array<JsonValue> | null;
